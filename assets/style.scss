@import 'breakpoint/stylesheets/breakpoint';

@function is-number($value) {
    @return type-of($value)=='number';
}

$theme-base: (#FF7315, #87D147, #FF2950);
$upwork: #6fda44;
$fiverr: #1dbf73;
$whites: (#ffffff, #f1f1f1, #FAF4F2, #f9f9f9, #ffffff80, #e4dfdc);
$blacks: (#111111, #222222, #333333, #4b4b4b, #a9a9a9, #22222280, #2222220d);
$breaks: (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px, xd: 1600px, xxd: 1900px);
$ms: ('em', 'rem');
$weights: ("thin": 100, "lit": 300, "reg": 400, "mid": 500, "bold": 600, "bolder": 700, "fat": 800, "xfat": 900);

$tests:("round": ('border-radius'), 'font': ('font-size'), width: ('width'), height: ('height'), lh: ('line-height'), mrb: ('margin-bottom'), mrt: ('margin-top'), mre: ('margin-right'), mry: ('margin-top', 'margin-bottom'));

$clss: (wid : ('width', '%', 1, 100, 10));

html,
body,
* {
    font-family: 'Poppins', sans-serif;


}

@each $cls,
$props in $clss {

    @each $media,
    $px in $breaks {
        .#{$cls} {

            $step: nth($props, 5);
            $from: ceil(nth($props, 3) /$step);
            $through: ceil(nth($props, 4) /$step);
            $unit: nth($props, 2);
            $prop: nth($props, 1);

            @if $px==0 {
                @for $i from $from through $through {
                    $i: $i * $step;

                    &-#{$i} {
                        #{$prop}: #{$i}#{unquote($unit)};
                    }

                }

                &-auto {
                    #{$prop}: auto;
                }

                &-unset {
                    #{$prop}: unset;
                }
            }

            @else {
                @include breakpoint($px) {
                    &-#{$media} {
                        @for $i from $from through $through {
                            $i: $i * $step;

                            &-#{$i} {
                                #{$prop}: #{$i}#{unquote($unit)};
                            }

                        }

                        &-auto {
                            #{$prop}: auto;
                        }

                        &-unset {
                            #{$prop}: unset;
                        }
                    }
                }
            }
        }
    }
}

@each $pref,
$prop in $tests {

    @each $media,
    $px in $breaks {
        .#{$pref} {
            @if $px==0 {
                @each $m in $ms {
                    &-#{$m} {
                        @for $i from 0 to 21 {
                            &-#{$i} {
                                @each $prop_name in $prop {
                                    #{$prop_name}: #{$i * 0.25}#{$m};
                                }

                            }


                        }
                    }
                }

            }

            @else {
                @include breakpoint($px) {
                    @each $m in $ms {
                        &-#{$media} {
                            &-#{$m} {
                                @for $i from 0 to 21 {
                                    &-#{$i} {
                                        @each $prop_name in $prop {
                                            #{$prop_name}: #{$i * 0.25}#{$m};
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
            }

        }

    }
}

body {

    .text {
        &-on {
            color: $theme-base;
        }

        &-off {
            color: nth($blacks, 5);
        }



        @each $name,
        $weight in $weights {
            &-#{$name} {
                font-weight: $weight;
            }
        }

        @for $i from 1 through 20 {
            &-lh-#{$i} {
                line-height: #{$i * 0.25}em;
            }
        }
    }

    .title {
        &-sec {
            font-size: 2.8rem;
            font-weight: 600;
        }
    }

    .nav {
        &-sec {
            font-size: 1.2rem;
        }
    }

    a {
        color: inherit;
        text-decoration: none;

        &:hover {
            color: unset;
        }
    }




    .cta {
        &-text {
            font-size: 2.1rem;
            line-height: 1.5;
            margin: 0;
        }
    }

    .projects {
        .card-title {
            font-size: 1rem;
        }

        .card-text {
            font-size: 0.7rem;
        }

        .btn {
            &-project {
                font-size: 1.2rem;
                padding: 0.6rem;
            }
        }

    }

    .footer {
        font-size: 1rem;

        .social {

            [class^="icon-"],
            [class*=" icon-"] {
                $ft: 0.5s;
                font-size: 2em;
                margin: 0.05em;
                padding: 0.2em;
                transition: color 0.5s;
                background-color: unset;
            }
        }

    }

    [class^="round-"],
    [class*=" round-"] {
        &.card {
            & *:nth-child(1):not([class^="round-"], [class*=" round-"]) {
                border-top-left-radius: inherit;
                border-top-right-radius: inherit;
            }

            & *:last-child():not([class^="round-"], [class*=" round-"]) {
                border-bottom-left-radius: inherit;
                border-bottom-right-radius: inherit;
            }
        }
    }
}


$colors: ("theme": $theme-base, "white": $whites, "black":$blacks);

@each $color,
$vars in $colors {

    @each $var in $vars {
        $i: index($vars, $var);

        .bg {
            &-#{$color} {
                &-#{$i} {
                    background-color: #{$var};

                    &.btn {
                        @if $color=="white" {
                            color: inherit;
                        }

                        @else {
                            color: nth($whites, 1);
                        }


                    }


                }



            }
        }

        .text {
            &-#{$color} {
                &-#{$i} {
                    color: #{$var};
                }
            }
        }

    }

}

.carousel-indicators {
    &.slick {
        position: relative;
        margin-top: 1.5rem;

        [role='presentation'] {
            button {
                display: none;
            }
        }

        li {
            position: relative;
            -webkit-box-flex: 0;
            -ms-flex: 0 1 auto;
            flex: 0 1 auto;
            width: 30px;
            height: 3px;
            margin-right: 3px;
            margin-left: 3px;
            text-indent: -999px;
            background-color: nth($whites, 5);
            cursor: pointer;
        }

        .slick-active {
            background-color: #fff;
        }
    }
}


.star-ratings {
    unicode-bidi: bidi-override;
    position: relative;

    .fill-ratings {
        position: absolute;
        z-index: 1;
        overflow: hidden;
        padding: 0;
        left: 0;
    }

    .empty-ratings {
        display: block;
        z-index: 0;
    }
}

.hero {
    &-img {
        position: relative;
        width: fit-content;
        z-index: 1;

        &::before,
        &::after {
            content: " ";
            width: 55%;
            height: 45%;
            position: absolute;
            background-image: url('icon/bullets.svg');
            background-size: contain;
            background-repeat: no-repeat;
            z-index: -1;
        }

        &::before {
            bottom: 0;
            left: 0;
            background-position: bottom left;
        }

        &::after {
            top: 0;
            right: 0;
            background-position: top right;
        }

    }
}

.border {
    &-black {
        &-half {
            border-color: nth($blacks, 7);
        }
    }
}

.social {

    [class^="icon-"],
    [class*=" icon-"] {
        border-radius: 50%;
        padding: 0.35em;
        background-color: nth($blacks, 5);
        opacity: 0.7;
        transition: opacity 0.5s, filter 0.5s;
        filter: sepia(10%);
        display: inline-block;

        &:hover {
            opacity: 1;
            filter: sepia(0%);
        }

    }

    $brands: (facebook :#1877F2,
        slack:#4A154B,
        messenger:#00B2FF,
        instagram:#E4405F,
        skype:#00AFF0,
        whatsapp:#25D366,
        twitter: #1DA1F2,
        upwork:#6FDA44,
        fiverr:#1DBF73,
        linkedin:#0A66C2,
        gitlab: #FCA121,
        github:#181717,
        git: #F05032,
        stack-overflow :#F58025,
        bitbucket:#0052CC);

    .icon {

        @each $brand,
        $props in $brands {
            &-#{$brand} {


                @if 1 < length($props) {
                    background-color: nth($props, 1);
                    font-size: nth($props, 2);
                }

                @else {
                    background-color: $props;
                }
            }
        }
    }

    .bg-off {
        background-color: unset;
    }
}

.shadow {
    $args: (null, "-lg", "-sm", "-none");

    @each $name in $args {
        &#{$name} {
            &.btn {
                transition: box-shadow 0.5s;

                &:hover {
                    box-shadow: none !important;
                }
            }
        }
    }
}